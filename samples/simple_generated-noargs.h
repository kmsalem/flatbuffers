// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_SIMPLE_SIMPLE_SAMPLE_H_
#define FLATBUFFERS_GENERATED_SIMPLE_SIMPLE_SAMPLE_H_

#include "flatbuffers/flatbuffers.h"

namespace simple {
namespace sample {

struct TinyTable;

struct TinyTable FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_FOO = 4,
    VT_BAR = 6
  };
  int16_t foo() const {
    return GetField<int16_t>(VT_FOO, 0);
  }
  int16_t bar() const {
    return GetField<int16_t>(VT_BAR, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int16_t>(verifier, VT_FOO) &&
           VerifyField<int16_t>(verifier, VT_BAR) &&
           verifier.EndTable();
  }
};

struct TinyTableBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_foo(int16_t foo) {
    fbb_.AddElement<int16_t>(TinyTable::VT_FOO, foo, 0);
  }
  void add_bar(int16_t bar) {
    fbb_.AddElement<int16_t>(TinyTable::VT_BAR, bar, 0);
  }
  explicit TinyTableBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  TinyTableBuilder &operator=(const TinyTableBuilder &);
  flatbuffers::Offset<TinyTable> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<TinyTable>(end);
    return o;
  }
};

inline flatbuffers::Offset<TinyTable> CreateTinyTable(
    flatbuffers::FlatBufferBuilder &_fbb,
    int16_t foo = 0,
    int16_t bar = 0) {
  TinyTableBuilder builder_(_fbb);
  builder_.add_bar(bar);
  builder_.add_foo(foo);
  return builder_.Finish();
}

inline const simple::sample::TinyTable *GetTinyTable(const void *buf) {
  return flatbuffers::GetRoot<simple::sample::TinyTable>(buf);
}

inline const simple::sample::TinyTable *GetSizePrefixedTinyTable(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<simple::sample::TinyTable>(buf);
}

inline bool VerifyTinyTableBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<simple::sample::TinyTable>(nullptr);
}

inline bool VerifySizePrefixedTinyTableBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<simple::sample::TinyTable>(nullptr);
}

inline void FinishTinyTableBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<simple::sample::TinyTable> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedTinyTableBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<simple::sample::TinyTable> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace sample
}  // namespace simple

#endif  // FLATBUFFERS_GENERATED_SIMPLE_SIMPLE_SAMPLE_H_
