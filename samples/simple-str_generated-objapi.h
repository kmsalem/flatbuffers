// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_SIMPLESTR_SIMPLE_H_
#define FLATBUFFERS_GENERATED_SIMPLESTR_SIMPLE_H_

#include "flatbuffers/flatbuffers.h"

namespace simple {

struct TinyTable;
struct TinyTableT;

struct TinyTableT : public flatbuffers::NativeTable {
  typedef TinyTable TableType;
  int16_t foo;
  int16_t bar;
  std::string zam;
  TinyTableT()
      : foo(0),
        bar(0) {
  }
};

struct TinyTable FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef TinyTableT NativeTableType;
  enum {
    VT_FOO = 4,
    VT_BAR = 6,
    VT_ZAM = 8
  };
  int16_t foo() const {
    return GetField<int16_t>(VT_FOO, 0);
  }
  int16_t bar() const {
    return GetField<int16_t>(VT_BAR, 0);
  }
  const flatbuffers::String *zam() const {
    return GetPointer<const flatbuffers::String *>(VT_ZAM);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int16_t>(verifier, VT_FOO) &&
           VerifyField<int16_t>(verifier, VT_BAR) &&
           VerifyOffset(verifier, VT_ZAM) &&
           verifier.Verify(zam()) &&
           verifier.EndTable();
  }
  TinyTableT *UnPack(const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(TinyTableT *_o, const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static flatbuffers::Offset<TinyTable> Pack(flatbuffers::FlatBufferBuilder &_fbb, const TinyTableT* _o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct TinyTableBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_foo(int16_t foo) {
    fbb_.AddElement<int16_t>(TinyTable::VT_FOO, foo, 0);
  }
  void add_bar(int16_t bar) {
    fbb_.AddElement<int16_t>(TinyTable::VT_BAR, bar, 0);
  }
  void add_zam(flatbuffers::Offset<flatbuffers::String> zam) {
    fbb_.AddOffset(TinyTable::VT_ZAM, zam);
  }
  explicit TinyTableBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  TinyTableBuilder &operator=(const TinyTableBuilder &);
  flatbuffers::Offset<TinyTable> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<TinyTable>(end);
    return o;
  }
};

inline flatbuffers::Offset<TinyTable> CreateTinyTable(
    flatbuffers::FlatBufferBuilder &_fbb,
    int16_t foo = 0,
    int16_t bar = 0,
    flatbuffers::Offset<flatbuffers::String> zam = 0) {
  TinyTableBuilder builder_(_fbb);
  builder_.add_zam(zam);
  builder_.add_bar(bar);
  builder_.add_foo(foo);
  return builder_.Finish();
}

inline flatbuffers::Offset<TinyTable> CreateTinyTableDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    int16_t foo = 0,
    int16_t bar = 0,
    const char *zam = nullptr) {
  return simple::CreateTinyTable(
      _fbb,
      foo,
      bar,
      zam ? _fbb.CreateString(zam) : 0);
}

flatbuffers::Offset<TinyTable> CreateTinyTable(flatbuffers::FlatBufferBuilder &_fbb, const TinyTableT *_o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);

inline TinyTableT *TinyTable::UnPack(const flatbuffers::resolver_function_t *_resolver) const {
  auto _o = new TinyTableT();
  UnPackTo(_o, _resolver);
  return _o;
}

inline void TinyTable::UnPackTo(TinyTableT *_o, const flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = foo(); _o->foo = _e; };
  { auto _e = bar(); _o->bar = _e; };
  { auto _e = zam(); if (_e) _o->zam = _e->str(); };
}

inline flatbuffers::Offset<TinyTable> TinyTable::Pack(flatbuffers::FlatBufferBuilder &_fbb, const TinyTableT* _o, const flatbuffers::rehasher_function_t *_rehasher) {
  return CreateTinyTable(_fbb, _o, _rehasher);
}

inline flatbuffers::Offset<TinyTable> CreateTinyTable(flatbuffers::FlatBufferBuilder &_fbb, const TinyTableT *_o, const flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { flatbuffers::FlatBufferBuilder *__fbb; const TinyTableT* __o; const flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _foo = _o->foo;
  auto _bar = _o->bar;
  auto _zam = _o->zam.empty() ? 0 : _fbb.CreateString(_o->zam);
  return simple::CreateTinyTable(
      _fbb,
      _foo,
      _bar,
      _zam);
}

inline const simple::TinyTable *GetTinyTable(const void *buf) {
  return flatbuffers::GetRoot<simple::TinyTable>(buf);
}

inline const simple::TinyTable *GetSizePrefixedTinyTable(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<simple::TinyTable>(buf);
}

inline bool VerifyTinyTableBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<simple::TinyTable>(nullptr);
}

inline bool VerifySizePrefixedTinyTableBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<simple::TinyTable>(nullptr);
}

inline void FinishTinyTableBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<simple::TinyTable> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedTinyTableBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<simple::TinyTable> root) {
  fbb.FinishSizePrefixed(root);
}

inline std::unique_ptr<TinyTableT> UnPackTinyTable(
    const void *buf,
    const flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<TinyTableT>(GetTinyTable(buf)->UnPack(res));
}

}  // namespace simple

#endif  // FLATBUFFERS_GENERATED_SIMPLESTR_SIMPLE_H_
