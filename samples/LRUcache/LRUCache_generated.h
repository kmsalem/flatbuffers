// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_LRUCACHE_LRUCACHE_H_
#define FLATBUFFERS_GENERATED_LRUCACHE_LRUCACHE_H_

#include "flatbuffers/flatbuffers_ramp.h"

namespace LRUCache {

struct cacheT;

struct NodeT;

struct cacheT : public flatbuffers_ramp::NativeTable {
  rMap<int32_t, NodeT *> cmap;
  NodeT * head;
  NodeT * tail;
  int32_t capacity;
  int32_t count;
  cacheT(RampAlloc *alloc)
      : cmap(SAllocator<std::pair<const int32_t, NodeT *> >(alloc)),
        capacity(0),
        count(0) {
  }
};

struct NodeT : public flatbuffers_ramp::NativeTable {
  int32_t key;
  rString value;
  NodeT * prev;
  NodeT * next;
  NodeT(RampAlloc *alloc)
      : key(0),
        value(SAllocator<char>(alloc)) {
  }
};

}  // namespace LRUCache

#endif  // FLATBUFFERS_GENERATED_LRUCACHE_LRUCACHE_H_
